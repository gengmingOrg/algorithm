1 以后做链表的时候 可以先声明一个链表的头部 然后在赋值一个 这样就有一个移动的指针
  循环的时候只要判断 传入的参数是否为 null 不用调用.next
  直接判断新出创建的节点的.next = 当前的 传入接点
  这次判断完了 就可以 进行下一个节点
  返回的时候从头部的下一个节点返回
2 splice 会改变原来的数组所以 splice 不行 改用快慢指针
3 快慢指针的题 原理就是使用两个指针 前行
4 判断两个字符串是否相等 要不就是暴力解法 两层for循环
5 总结：暴力解法，时间复杂度为（n） 用二分查找法可以转化O(logn)
  如果里面的数字 大于当前值 就 start = mid + 1
  如果里面的数字 小于当前值 就 end = mid - 1
  终止条件 end <= start

  等于条件另行判断 target <= nums[start] ? start : start + 1 是否大于当前的值 如果大于就返回start+1
6 在替换字符串的时候 不是很理解 替换的位置 导致自己在 指针移动的位置上面 花了很多心思
7 暴力解法：就是比较 当前值 和 前面的值和谁大 如果 大 就加上 如果小 就把当前的和 变成现在的值
  然后比较跟最大直 复制
  分而治之： 就是用二分法 分解任务，然后单独处理 这样时间复杂度 就变成O（logn）
总结：
  完成情况：简单类型7道，中、 高难度的题没有完成，中、 高难度花费的时间有较长，所以下周的方针是
  1 完成一道中等难度的，每天一道算法题，
  2记录每天算法的用时和 方法
  3按照类型去做题这样应该对于练习有更好的帮助
